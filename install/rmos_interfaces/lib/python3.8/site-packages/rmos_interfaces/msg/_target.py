# generated from rosidl_generator_py/resource/_idl.py.em
# with input from rmos_interfaces:msg/Target.idl
# generated code does not contain a copyright notice


# Import statements for member types

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_Target(type):
    """Metaclass of message 'Target'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('rmos_interfaces')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'rmos_interfaces.msg.Target')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__target
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__target
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__target
            cls._TYPE_SUPPORT = module.type_support_msg__msg__target
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__target

            from geometry_msgs.msg import Point
            if Point.__class__._TYPE_SUPPORT is None:
                Point.__class__.__import_type_support__()

            from std_msgs.msg import Header
            if Header.__class__._TYPE_SUPPORT is None:
                Header.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class Target(metaclass=Metaclass_Target):
    """Message class 'Target'."""

    __slots__ = [
        '_header',
        '_id',
        '_track_state',
        '_suggest_fire',
        '_gun_pitch',
        '_gun_yaw',
        '_timestamp_recv',
        '_outpost_direction',
        '_position',
    ]

    _fields_and_field_types = {
        'header': 'std_msgs/Header',
        'id': 'uint8',
        'track_state': 'uint8',
        'suggest_fire': 'boolean',
        'gun_pitch': 'float',
        'gun_yaw': 'float',
        'timestamp_recv': 'uint32',
        'outpost_direction': 'int8',
        'position': 'geometry_msgs/Point',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Header'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('boolean'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int8'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['geometry_msgs', 'msg'], 'Point'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        from std_msgs.msg import Header
        self.header = kwargs.get('header', Header())
        self.id = kwargs.get('id', int())
        self.track_state = kwargs.get('track_state', int())
        self.suggest_fire = kwargs.get('suggest_fire', bool())
        self.gun_pitch = kwargs.get('gun_pitch', float())
        self.gun_yaw = kwargs.get('gun_yaw', float())
        self.timestamp_recv = kwargs.get('timestamp_recv', int())
        self.outpost_direction = kwargs.get('outpost_direction', int())
        from geometry_msgs.msg import Point
        self.position = kwargs.get('position', Point())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.header != other.header:
            return False
        if self.id != other.id:
            return False
        if self.track_state != other.track_state:
            return False
        if self.suggest_fire != other.suggest_fire:
            return False
        if self.gun_pitch != other.gun_pitch:
            return False
        if self.gun_yaw != other.gun_yaw:
            return False
        if self.timestamp_recv != other.timestamp_recv:
            return False
        if self.outpost_direction != other.outpost_direction:
            return False
        if self.position != other.position:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def header(self):
        """Message field 'header'."""
        return self._header

    @header.setter
    def header(self, value):
        if __debug__:
            from std_msgs.msg import Header
            assert \
                isinstance(value, Header), \
                "The 'header' field must be a sub message of type 'Header'"
        self._header = value

    @property  # noqa: A003
    def id(self):  # noqa: A003
        """Message field 'id'."""
        return self._id

    @id.setter  # noqa: A003
    def id(self, value):  # noqa: A003
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'id' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'id' field must be an unsigned integer in [0, 255]"
        self._id = value

    @property
    def track_state(self):
        """Message field 'track_state'."""
        return self._track_state

    @track_state.setter
    def track_state(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'track_state' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'track_state' field must be an unsigned integer in [0, 255]"
        self._track_state = value

    @property
    def suggest_fire(self):
        """Message field 'suggest_fire'."""
        return self._suggest_fire

    @suggest_fire.setter
    def suggest_fire(self, value):
        if __debug__:
            assert \
                isinstance(value, bool), \
                "The 'suggest_fire' field must be of type 'bool'"
        self._suggest_fire = value

    @property
    def gun_pitch(self):
        """Message field 'gun_pitch'."""
        return self._gun_pitch

    @gun_pitch.setter
    def gun_pitch(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'gun_pitch' field must be of type 'float'"
        self._gun_pitch = value

    @property
    def gun_yaw(self):
        """Message field 'gun_yaw'."""
        return self._gun_yaw

    @gun_yaw.setter
    def gun_yaw(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'gun_yaw' field must be of type 'float'"
        self._gun_yaw = value

    @property
    def timestamp_recv(self):
        """Message field 'timestamp_recv'."""
        return self._timestamp_recv

    @timestamp_recv.setter
    def timestamp_recv(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'timestamp_recv' field must be of type 'int'"
            assert value >= 0 and value < 4294967296, \
                "The 'timestamp_recv' field must be an unsigned integer in [0, 4294967295]"
        self._timestamp_recv = value

    @property
    def outpost_direction(self):
        """Message field 'outpost_direction'."""
        return self._outpost_direction

    @outpost_direction.setter
    def outpost_direction(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'outpost_direction' field must be of type 'int'"
            assert value >= -128 and value < 128, \
                "The 'outpost_direction' field must be an integer in [-128, 127]"
        self._outpost_direction = value

    @property
    def position(self):
        """Message field 'position'."""
        return self._position

    @position.setter
    def position(self, value):
        if __debug__:
            from geometry_msgs.msg import Point
            assert \
                isinstance(value, Point), \
                "The 'position' field must be a sub message of type 'Point'"
        self._position = value
